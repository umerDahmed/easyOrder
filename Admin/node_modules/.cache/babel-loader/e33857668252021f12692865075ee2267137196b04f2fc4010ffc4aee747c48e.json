{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["C:\\Users\\bond\\Desktop\\major project\\EasyOrder\\Admin\\node_modules\\@antv\\coord\\src\\interface.ts"],"sourcesContent":["export interface Point {\n  readonly x: number;\n  readonly y: number;\n}\n\nexport interface Range {\n  readonly start: number;\n  readonly end: number;\n}\n\nexport interface CoordinateCfg {\n  readonly start: Point;\n  readonly end: Point;\n  readonly matrix?: number[];\n  readonly isTransposed?: boolean;\n}\n\nexport interface PolarCfg extends CoordinateCfg {\n  readonly startAngle?: number;\n  readonly endAngle?: number;\n  readonly innerRadius?: number;\n  readonly radius?: number;\n}\n\nexport interface ICoordinate {\n  /** 坐标系类型 */\n  readonly type: string;\n  /** 是否为直角坐标系 */\n  readonly isRect?: boolean;\n  /** 是否为螺旋坐标系 */\n  readonly isHelix?: boolean;\n  /** 是否为极坐标系 */\n  readonly isPolar?: boolean;\n\n  /** 坐标系起始位置，左下角 */\n  readonly start: Point;\n  /** 坐标系结束位置，右上角 */\n  readonly end: Point;\n  /** 坐标系矩阵 */\n  readonly matrix: number[];\n  /** 坐标系是否发生转置 */\n  readonly isTransposed: boolean;\n\n  /** Helix, Polar 坐标系的起始角度 */\n  readonly startAngle?: number;\n  /** Helix, Polar 坐标系的结束角度 */\n  readonly endAngle?: number;\n  /** Helix, Polar 坐标系的内圆半径 */\n  readonly innerRadius?: number;\n  /** Helix, Polar 坐标系的半径 */\n  readonly radius?: number;\n\n  /** 坐标系 x 方向的范围 */\n  readonly x: Range;\n  /** 坐标系 y 方向的范围 */\n  readonly y: Range;\n\n  /** 初始化流程 */\n  initial(): void;\n  /** 更新配置 */\n  update(cfg: CoordinateCfg): void;\n  /** 转换指定维度的画布坐标 */\n  convertDim(percent: number, dim: string): number;\n  /** 将指定维度的画布坐标转换为 0 - 1 的值 */\n  invertDim(value: number, dim: string): number;\n  /** 将坐标点进行矩阵变换 */\n  applyMatrix(x: number, y: number, tag: number): number[];\n\n  /** 将坐标点进行矩阵逆变换 */\n  invertMatrix(x: number, y: number, tag: number): number[];\n\n  /**\n   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换\n   * @param point 归一化的坐标点\n   * @return      返回进行矩阵变换后的画布坐标\n   */\n  convert(point: Point): Point;\n\n  /**\n   * 将进行过矩阵变换画布坐标转换为归一化坐标\n   * @param point 画布坐标\n   * @return      返回归一化的坐标点\n   */\n  invert(point: Point): Point;\n\n  /**\n   * 坐标系旋转变换\n   * @param  radian 旋转弧度\n   * @return        返回坐标系对象\n   */\n  rotate(radian: number);\n\n  /**\n   * 坐标系反射变换\n   * @param dim 反射维度\n   * @return    返回坐标系对象\n   */\n  reflect(dim: string);\n\n  /**\n   * 坐标系比例变换\n   * @param s1 x 方向缩放比例\n   * @param s2 y 方向缩放比例\n   * @return     返回坐标系对象\n   */\n  scale(s1: number, s2: number);\n\n  /**\n   * 坐标系平移变换\n   * @param x x 方向平移像素\n   * @param y y 方向平移像素\n   * @return    返回坐标系对象\n   */\n  translate(x: number, y: number);\n\n  /**\n   * 将坐标系 x y 两个轴进行转置\n   * @return 返回坐标系对象\n   */\n  transpose();\n\n  /** 获取坐标系中心点位置 */\n  getCenter(): Point;\n\n  /** 获取坐标系宽度 */\n  getWidth(): number;\n\n  /** 获取坐标系高度 */\n  getHeight(): number;\n\n  /** 获取坐标系半径 */\n  getRadius(): number;\n  /**\n   * whether has reflect\n   * @param dim\n   */\n  isReflect(dim: string): boolean;\n\n  /**\n   * 重置 matrix\n   * @param matrix 如果传入，则使用，否则使用构造函数中传入的默认 matrix\n   */\n  resetMatrix(matrix?: number[]);\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}