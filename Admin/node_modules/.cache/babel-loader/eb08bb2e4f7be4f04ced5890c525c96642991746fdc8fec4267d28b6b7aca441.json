{"ast":null,"code":"import { getLogPositiveMin, log } from '../util/math';\n/**\n * 计算 log 的 ticks，考虑 min = 0 的场景\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function calculateLogTicks(cfg) {\n  var base = cfg.base,\n    tickCount = cfg.tickCount,\n    min = cfg.min,\n    max = cfg.max,\n    values = cfg.values;\n  var minTick;\n  var maxTick = log(base, max);\n  if (min > 0) {\n    minTick = Math.floor(log(base, min));\n  } else {\n    var positiveMin = getLogPositiveMin(values, base, max);\n    minTick = Math.floor(log(base, positiveMin));\n  }\n  var count = maxTick - minTick;\n  var avg = Math.ceil(count / tickCount);\n  var ticks = [];\n  for (var i = minTick; i < maxTick + avg; i = i + avg) {\n    ticks.push(Math.pow(base, i));\n  }\n  if (min <= 0) {\n    // 最小值 <= 0 时显示 0\n    ticks.unshift(0);\n  }\n  return ticks;\n}","map":{"version":3,"names":["getLogPositiveMin","log","calculateLogTicks","cfg","base","tickCount","min","max","values","minTick","maxTick","Math","floor","positiveMin","count","avg","ceil","ticks","i","push","pow","unshift"],"sources":["C:\\Users\\bond\\Desktop\\major project\\EasyOrder\\Admin\\node_modules\\@antv\\scale\\src\\tick-method\\log.ts"],"sourcesContent":["import { isEmpty } from '@antv/util';\nimport { ScaleConfig } from '../types';\nimport { getLogPositiveMin, log } from '../util/math';\n\n/**\n * 计算 log 的 ticks，考虑 min = 0 的场景\n * @param cfg 度量的配置项\n * @returns 计算后的 ticks\n */\nexport default function calculateLogTicks(cfg: ScaleConfig) {\n  const { base, tickCount, min, max, values } = cfg;\n  let minTick;\n  const maxTick = log(base, max);\n  if (min > 0) {\n    minTick = Math.floor(log(base, min));\n  } else {\n    const positiveMin = getLogPositiveMin(values, base, max);\n    minTick = Math.floor(log(base, positiveMin));\n  }\n  const count = maxTick - minTick;\n  const avg = Math.ceil(count / tickCount);\n  const ticks = [];\n  for (let i = minTick; i < maxTick + avg; i = i + avg) {\n    ticks.push(Math.pow(base, i));\n  }\n  if (min <= 0) {\n    // 最小值 <= 0 时显示 0\n    ticks.unshift(0);\n  }\n  return ticks;\n}\n"],"mappings":"AAEA,SAASA,iBAAiB,EAAEC,GAAG,QAAQ,cAAc;AAErD;;;;;AAKA,eAAc,SAAUC,iBAAiBA,CAACC,GAAgB;EAChD,IAAAC,IAAI,GAAkCD,GAAG,CAAAC,IAArC;IAAEC,SAAS,GAAuBF,GAAG,CAAAE,SAA1B;IAAEC,GAAG,GAAkBH,GAAG,CAAAG,GAArB;IAAEC,GAAG,GAAaJ,GAAG,CAAAI,GAAhB;IAAEC,MAAM,GAAKL,GAAG,CAAAK,MAAR;EACzC,IAAIC,OAAO;EACX,IAAMC,OAAO,GAAGT,GAAG,CAACG,IAAI,EAAEG,GAAG,CAAC;EAC9B,IAAID,GAAG,GAAG,CAAC,EAAE;IACXG,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACX,GAAG,CAACG,IAAI,EAAEE,GAAG,CAAC,CAAC;GACrC,MAAM;IACL,IAAMO,WAAW,GAAGb,iBAAiB,CAACQ,MAAM,EAAEJ,IAAI,EAAEG,GAAG,CAAC;IACxDE,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACX,GAAG,CAACG,IAAI,EAAES,WAAW,CAAC,CAAC;;EAE9C,IAAMC,KAAK,GAAGJ,OAAO,GAAGD,OAAO;EAC/B,IAAMM,GAAG,GAAGJ,IAAI,CAACK,IAAI,CAACF,KAAK,GAAGT,SAAS,CAAC;EACxC,IAAMY,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIC,CAAC,GAAGT,OAAO,EAAES,CAAC,GAAGR,OAAO,GAAGK,GAAG,EAAEG,CAAC,GAAGA,CAAC,GAAGH,GAAG,EAAE;IACpDE,KAAK,CAACE,IAAI,CAACR,IAAI,CAACS,GAAG,CAAChB,IAAI,EAAEc,CAAC,CAAC,CAAC;;EAE/B,IAAIZ,GAAG,IAAI,CAAC,EAAE;IACZ;IACAW,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC;;EAElB,OAAOJ,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}