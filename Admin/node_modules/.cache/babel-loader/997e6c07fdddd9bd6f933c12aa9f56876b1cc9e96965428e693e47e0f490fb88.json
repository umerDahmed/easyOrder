{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:\\Users\\bond\\Desktop\\major project\\EasyOrder\\Admin\\node_modules\\@antv\\component\\src\\types.ts"],"sourcesContent":["import { AnimateCfg, BBox, IGroup, IShape, Point, ShapeAttrs } from '@antv/g-base';\nexport type LocationType = 'point' | 'Region' | 'points' | 'circle' | 'none';\n\nexport { Point, BBox };\n\n/** 用于返回样式 ShapeAttrs 的 Callback 函数定义 */\ntype ShapeAttrsCallback = (item: any, index: number, items: any[]) => ShapeAttrs;\n\n/** 对象 */\nexport interface LooseObject {\n  [key: string]: any;\n}\n\nexport interface OffsetPoint {\n  offsetX: number;\n  offsetY: number;\n}\n\nexport interface Region {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end: Point;\n}\n\nexport interface Range {\n  /**\n   * 开始值\n   * @type {number}\n   */\n  min: number;\n  /**\n   * 结束值\n   * @type {number}\n   */\n  max: number;\n}\n\n/** 文本背景框配置 */\nexport interface EnhancedTextBackgroundCfg {\n  /** 文字内边距，同 css 盒模型 */\n  padding?: number | number[];\n  /** 文字包围盒样式 */\n  style?: ShapeAttrs;\n}\n\n/**\n * 增强型文本配置：\n * 1. 可自动缩略\n * 2. 可绘制背景框\n */\nexport interface EnhancedTextCfg {\n  /** 文本标注内容 */\n  content: string | number;\n  /** 旋转，弧度制 */\n  rotate?: number;\n  /** 文本标注样式 */\n  style?: ShapeAttrs;\n  /** 文字包围盒样式设置 */\n  background?: EnhancedTextBackgroundCfg;\n  /** 文本的最大长度 */\n  maxLength?: number;\n  /** 超出 maxLength 是否自动省略 */\n  autoEllipsis?: boolean;\n  /** 文本在二维坐标系的显示位置，是沿着 x 轴显示 还是沿着 y 轴显示 */\n  isVertical?: boolean;\n  /** 文本截断的位置 */\n  ellipsisPosition?: 'head' | 'middle' | 'tail';\n}\n\n/**\n * @interface\n * 列表选项接口\n */\nexport interface ListItem {\n  /**\n   * 唯一值，用于动画或者查找\n   * @type {string}\n   */\n  id?: string;\n  /**\n   * 名称\n   * @type {string}\n   */\n  name: string;\n  /**\n   * 值\n   * @type {any}\n   */\n  value: any;\n  /**\n   * 图形标记\n   * @type {object|string}\n   */\n  marker?: object | string;\n  [key: string]: any;\n}\n\n/**\n * @interface\n * 栅格项的定义\n */\nexport interface GridItem {\n  /**\n   * 唯一值，用于动画或者查找\n   * @type {string}\n   */\n  id?: string;\n  /**\n   * 栅格线的点集合\n   * @type {Point[]}\n   */\n  points: Point[];\n  [key: string]: any;\n}\n\n/**\n * @interface\n * 坐标轴线定义\n */\nexport interface AxisLineCfg {\n  /**\n   * 坐标轴线的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\n/**\n * @interface\n * 坐标轴刻度定义\n */\nexport interface AxisTickLineCfg {\n  /**\n   * 坐标轴刻度线的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n  /**\n   * 是否同 tick 对齐\n   * @type {boolean}\n   */\n  alignTick?: boolean; // 是否同 tick 对齐\n  /**\n   * 长度\n   * @type {number}\n   */\n  length?: number;\n}\n\ntype avoidCallback = (isVertical: boolean, labelGroup: IGroup, limitLength?: number) => boolean;\n\n/** 坐标轴自动隐藏的配置 */\nexport interface AxisLabelAutoHideCfg {\n  /** 最小间距配置 */\n  minGap?: number;\n}\n\n/**\n * @interface\n * 坐标轴文本定义\n */\nexport interface AxisLabelCfg {\n  /**\n   * 坐标轴文本的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n  /**\n   * label 的偏移量\n   * @type {number}\n   */\n  offset?: number;\n  /**\n   * label 在X方向的额外偏移量\n   * @type {number}\n   */\n  offsetX?: number;\n  /**\n   * label 在Y方向的额外偏移量\n   * @type {number}\n   */\n  offsetY?: number;\n  /**\n   * 文本旋转角度\n   * @type {number}\n   */\n  rotate?: number;\n  /**\n   * 格式化函数\n   * @type {formatterCallback}\n   */\n  formatter?: formatterCallback;\n  /**\n   * 是否自动旋转，默认 true\n   * @type {boolean|avoidCallback|string}\n   */\n  autoRotate?: boolean | avoidCallback | string;\n  /**\n   * 是否自动隐藏，默认 false\n   * @type {boolean|avoidCallback|string|{type:string,cfg?:AxisLabelAutoHideCfg}}\n   */\n  autoHide?: boolean | avoidCallback | string | { type: string; cfg?: AxisLabelAutoHideCfg };\n  /**\n   * 是否自动省略，默认 false\n   * @type {boolean|avoidCallback|string}\n   */\n  autoEllipsis?: boolean | avoidCallback | string;\n}\n\n/**\n * @interface\n * 坐标轴子刻度定义\n */\nexport interface AxisSubTickLineCfg {\n  /**\n   * 坐标轴刻度线的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n  /**\n   * 子刻度个数\n   * @type {number}\n   */\n  count?: number;\n  /**\n   * 子刻度线长度\n   * @type {number}\n   */\n  length?: number;\n}\n\n/**\n * @interface\n * 坐标轴标题定义\n */\nexport interface AxisTitleCfg {\n  /**\n   * 标题距离坐标轴的距离\n   * @type {number}\n   */\n  offset?: number;\n  /**\n   * 标题距离坐标轴文本的距离\n   */\n  spacing?: number;\n  /**\n   * 标题文本配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n  /**\n   * 是否自动旋转\n   * @type {boolean}\n   */\n  autoRotate?: boolean;\n  /**\n   * 设置文本\n   * @type {string}\n   */\n  text?: string;\n  /**\n   * 文本对齐方式\n   * @type {string} start, center, end\n   */\n  position?: string;\n  /**\n   * 坐标轴标题详细信息\n   */\n  description?: string;\n  /**\n   * 坐标轴标题详情icon\n   */\n  iconStyle?: AxisIconStyle;\n}\n\nexport interface AxisIconStyle {\n  stroke?: string;\n  strokeOpacity?: number;\n  fill?: string;\n  fillOpacity?: number;\n  opacity?: number;\n}\n\nexport interface BaseCfg {\n  [key: string]: any;\n}\n\nexport interface ComponentCfg extends BaseCfg {\n  /**\n   * 唯一标定组件的 id\n   * @type {string}\n   */\n  id?: string;\n  /**\n   * 定位的方式\n   * @type {string}\n   */\n  LocationType?: string;\n  /**\n   * 偏移位置 x\n   * @type {number}\n   */\n  offsetX?: number;\n  /**\n   * 偏移位置 y\n   * @type {number}\n   */\n  offsetY?: number;\n  /**\n   * 组件名称， axis, legend, tooltip\n   * @type {string}\n   */\n  name?: string;\n  /**\n   * 组件的类型，同 name 配合使用可以确定具体组件的类型，例如：\n   *  name: 'axis',\n   *  type: 'line'\n   */\n  type?: string;\n  /**\n   * 是否会捕捉事件\n   */\n  capture?: boolean;\n  /**\n   * 是否允许动画，不同组件允许动画的内容不同\n   * @type {boolean}\n   */\n  animate?: boolean;\n  /**\n   * 更新时自动渲染, 所有 html 的组件 update 时自动调用渲染，group 的组件默认 false\n   */\n  updateAutoRender?: boolean;\n  /**\n   * 动画的配置项\n   * @type {AnimateCfg}\n   */\n  animateOption?: AnimateOption;\n  /**\n   * 事件对象，可以在配置项中传入事件\n   * @example\n   * events: {\n   *   itemclick: ev => {\n   *\n   *   }\n   * }\n   * // 等效于\n   * component.on('itemclick', ev => {\n   *\n   * });\n   * @type {object}\n   */\n  events?: object;\n  /**\n   * @protected\n   * 配置项生效时的默认值，一些配置项是对象时，防止将一些内置的配置项清空，减少判空判断\n   * @example\n   * new Axis({\n   *   tickLine: {\n   *     length: 10 // 此时没有设置 style，内部调用 tickLine.style 时会出问题\n   *   }\n   * })\n   * @type {object}\n   */\n  defaultCfg?: object;\n}\n\nexport interface AnimateOption {\n  /** 初始化渲染时的入场动画，false/null 表示关闭入场动画 */\n  appear?: AnimateCfg | false | null;\n  /** 发生更新时，新增元素的入场动画，false/null 表示关闭入场动画 */\n  enter?: AnimateCfg | false | null;\n  /** 更新动画配置，false/null 表示关闭更新动画 */\n  update?: AnimateCfg | false | null;\n  /** 销毁动画配置，false/null 表示关闭销毁动画 */\n  leave?: AnimateCfg | false | null;\n}\n\nexport interface GroupComponentCfg extends ComponentCfg {\n  /**\n   * 组件的容器\n   * @type {IGroup}\n   */\n  container: IGroup;\n  /**\n   * 当前组件对应的 group，一个 container 中可能会有多个组件，但是一个组件都有一个自己的 Group\n   * @type {IGroup}\n   */\n  group?: IGroup;\n  /**\n   * 组件是否可以被拾取\n   * @type {boolean}\n   */\n  capture?: boolean;\n}\n\nexport interface HtmlComponentCfg extends ComponentCfg {\n  /**\n   * 组件的 DOM 容器\n   * @type {HTMLElement|string}\n   */\n  container?: HTMLElement | string;\n  /**\n   * 组件的父容器\n   */\n  parent?: HTMLElement | string;\n  /**\n   * 内部 DOM 的样式\n   */\n  domStyles?: LooseObject;\n}\n\nexport interface OptimizeCfg {\n  /** 是否启动大数据量优化 */\n  enable: boolean;\n  /** 大数据数据量配置，达到 threshold 后启动优化，默认 400 */\n  threshold?: number;\n}\n\nexport interface AxisBaseCfg extends GroupComponentCfg {\n  /**\n   * 坐标轴刻度的集合\n   * @type {ListItem[]}\n   */\n  ticks: ListItem[];\n  /**\n   * 坐标轴线的配置项\n   * @type {AxisLineCfg}\n   */\n  line?: AxisLineCfg;\n  /**\n   * 坐标轴刻度线线的配置项\n   * @type {AxisTickLineCfg}\n   */\n  tickLine?: AxisTickLineCfg;\n  /**\n   * 坐标轴子刻度线的配置项\n   * @type {AxisSubTickLineCfg}\n   */\n  subTickLine?: AxisSubTickLineCfg;\n  /**\n   * 标题的配置项\n   * @type {AxisTitleCfg}\n   */\n  title?: AxisTitleCfg;\n  /**\n   * 文本标签的配置项\n   */\n  label?: AxisLabelCfg;\n  /**\n   * 垂直于坐标轴方向的因子，决定文本、title、tickLine 在坐标轴的哪一侧，默认是 1，在坐标轴逆时针方向\n   */\n  verticalFactor?: number;\n  /**\n   * 垂直于坐标轴方向的限制长度，防止文本超出\n   * @type {number}\n   */\n  verticalLimitLength?: number;\n  /**\n   * 处理遮挡时的顺序，默认 ['autoRotate', 'autoHide']\n   */\n  overlapOrder?: string[];\n  /**\n   * 针对大数据量进行优化配置\n   */\n  optimize?: OptimizeCfg;\n}\n\nexport interface LineAxisCfg extends AxisBaseCfg {\n  /**\n   * 坐标轴的起始点\n   * @type {Point}\n   */\n  start: Point;\n  /**\n   * 坐标轴的结束点\n   * @type {Point}\n   */\n  end: Point;\n}\n\nexport interface CircleAxisCfg extends AxisBaseCfg {\n  /**\n   * 中心点, x, y\n   * @type {Point}\n   */\n  center: Point;\n  /**\n   * 半径\n   * @type {number}\n   */\n  radius: number;\n  /**\n   * 开始弧度\n   * @type {number}\n   */\n  startAngle?: number;\n  /**\n   * 结束弧度\n   * @type {number}\n   */\n  endAngle?: number;\n}\n\nexport interface GridLineCfg {\n  /**\n   * 栅格线的类型\n   * @type {string}\n   */\n  type?: string;\n  /**\n   * 栅格线的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n}\n\nexport interface GridBaseCfg extends GroupComponentCfg {\n  /**\n   * 线的样式\n   * @type {object}\n   */\n  line?: GridLineCfg;\n  /**\n   * 两个栅格线间的填充色，必须是一个数组\n   * @type {string|string[]}\n   */\n  alternateColor?: string | string[];\n  /**\n   * 绘制 grid 需要的点的集合\n   * @type {GridItem[]}\n   */\n  items: GridItem[];\n  /**\n   * 栅格线是否封闭\n   * @type {boolean}\n   */\n  closed?: boolean;\n}\n\nexport interface CircleGridCfg extends GridBaseCfg {\n  /**\n   * 中心点\n   * @type {Point}\n   */\n  center: Point;\n}\n\nexport interface LegendBaseCfg extends GroupComponentCfg {\n  /**\n   * 布局方式： horizontal，vertical\n   * @type {String}\n   */\n  layout?: string;\n  /**\n   * 位置 x\n   * @type {number}\n   */\n  x?: number;\n  /**\n   * 位置 y\n   * @type {number}\n   */\n  y?: number;\n  /**\n   * 标题\n   * @type {LegendTitleCfg}\n   */\n  title?: LegendTitleCfg;\n  /**\n   * 背景框配置项\n   * @type {LegendBackgroundCfg}\n   */\n  background?: LegendBackgroundCfg;\n}\nexport interface CategoryLegendCfg extends LegendBaseCfg {\n  /**\n   * 图例项水平方向的间距\n   * @type {number}\n   */\n  itemSpacing?: number;\n  /**\n   * 图例项的最大宽度，默认为 null，由上层传入\n   */\n  maxItemWidth?: number;\n  /**\n   * 图例项的宽度, 默认为 null，自动计算\n   * @type {number}\n   */\n  itemWidth?: number;\n  /**\n   * 图例的高度，默认为 null\n   * @type {[type]}\n   */\n  itemHeight?: number;\n  /**\n   * 图例项 name 文本的配置\n   * @type {LegendItemNameCfg}\n   */\n  itemName?: LegendItemNameCfg;\n  /**\n   * 图例项 value 附加值的配置项\n   * @type {LegendItemValueCfg}\n   */\n  itemValue?: LegendItemValueCfg;\n  /**\n   *\n   * @type {LegendRadio}\n   */\n  radio?: LegendRadio;\n  /**\n   * 最大宽度\n   * @type {number}\n   */\n  maxWidth?: number;\n  /**\n   * 最大高度\n   * @type {number}\n   */\n  maxHeight?: number;\n  /**\n   * 图例项的 marker 图标的配置\n   * @type {LegendMarkerCfg}\n   */\n  marker?: LegendMarkerCfg;\n  /**\n   * 图例项集合\n   * @type {ListItem[]}\n   */\n  items: ListItem[];\n  /**\n   * 是否翻页\n   */\n  flipPage?: boolean;\n  /**\n   * 翻页行数（只适用于横向）\n   */\n  maxRow?: number;\n  /**\n   * 分页器配置\n   * @type {LegendPageNavigatorCfg}\n   */\n  flipNavigation?: LegendPageNavigatorCfg;\n}\n\nexport interface ContinueLegendCfg extends LegendBaseCfg {\n  /**\n   * 选择范围的最小值\n   * @type {number}\n   */\n  min: number;\n  /**\n   * 选择范围的最大值\n   * @type {number}\n   */\n  max: number;\n  /**\n   * 选择的值\n   * @type {number[]}\n   */\n  value: number[];\n  /**\n   * 图例的颜色，可以写多个颜色\n   * @type {number[]}\n   */\n  colors: number[];\n  /**\n   * 选择范围的色块配置项\n   * @type {ContinueLegendTrackCfg}\n   */\n  track: ContinueLegendTrackCfg;\n  /**\n   * 图例滑轨（背景）的配置项\n   * @type {ContinueLegendRailCfg}\n   */\n  rail: ContinueLegendRailCfg;\n  /**\n   * 文本的配置项\n   * @type {ContinueLegendLabelCfg}\n   */\n  label: ContinueLegendLabelCfg;\n  /**\n   * 滑块的配置项\n   * @type {ContinueLegendHandlerCfg}\n   */\n  handler: ContinueLegendHandlerCfg;\n  /**\n   * 是否可以滑动\n   * @type {boolean}\n   */\n  slidable: boolean;\n}\n\nexport interface ContinueLegendTrackCfg {\n  /**\n   * 选定范围的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface ContinueLegendHandlerCfg {\n  /**\n   * 滑块大小\n   * @type {number}\n   */\n  size?: number;\n  /**\n   * 滑块样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface ContinueLegendRailCfg {\n  /**\n   * rail 的类型，color, size\n   * @type {string}\n   */\n  type?: string;\n  /**\n   * 滑轨的宽度\n   * @type {number}\n   */\n  size?: number;\n  /**\n   * 滑轨的默认长度，，当限制了 maxWidth,maxHeight 时，不会使用这个属性会自动计算长度\n   * @type {number}\n   */\n  defaultLength?: number;\n  /**\n   * 滑轨的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface ContinueLegendLabelCfg {\n  /**\n   * 文本同滑轨的对齐方式，有五种类型\n   *  - rail ： 同滑轨对齐，在滑轨的两端\n   *  - top, bottom: 图例水平布局时有效\n   *  - left, right: 图例垂直布局时有效\n   * @type {string}\n   */\n  align?: string;\n  /**\n   * 文本格式化\n   * @type {string}\n   */\n  formatter?: (text: string | number | null) => string;\n  /**\n   * 文本同滑轨的距离\n   * @type {number}\n   */\n  spacing?: number;\n  /**\n   * 文本样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface LegendTitleCfg {\n  /**\n   * 标题同图例项的间距\n   * @type {number}\n   */\n  spacing?: number;\n  /**\n   * 文本配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface LegendBackgroundCfg {\n  /**\n   * @type {number|number[]}\n   * 背景的留白\n   */\n  padding?: number | number[];\n  /**\n   * @type {ShapeAttrs}\n   * 背景配置项\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface LegendItemNameCfg {\n  /**\n   * 图例项 name 同后面 value 的间距\n   * @type {number}\n   */\n  spacing?: number;\n  /**\n   * 格式化文本函数\n   * @type {formatterCallback}\n   */\n  formatter?: formatterCallback;\n  /**\n   * 文本配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n}\n\ntype formatterCallback = (text: string, item: ListItem, index: number) => any;\n\nexport interface LegendItemValueCfg {\n  /**\n   * 是否右对齐，默认为 false，仅当设置图例项宽度时生效\n   * @type {boolean}\n   */\n  alignRight?: boolean;\n  /**\n   * 格式化文本函数\n   * @type {formatterCallback}\n   */\n  formatter?: formatterCallback;\n  /**\n   * 图例项附加值的配置\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs | ShapeAttrsCallback;\n  /**\n   * 图例值和后面的间隔，可以控制和 RadioIcon 的间距\n   * @type {number}\n   */\n  spacing?: number;\n}\n\n/**\n * radio 的配置项\n */\nexport interface LegendRadio {\n  /**\n   * radio 样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n  /**\n   * radio 的提示信息\n   */\n  tip?: string;\n}\n\nexport interface LegendMarkerCfg {\n  /**\n   * 图例项 marker 同后面 name 的间距\n   * @type {number}\n   */\n  spacing?: number;\n  /**\n   * 图例 marker 形状\n   */\n  symbol?: string | ((x: number, y: number, r: number) => any);\n  /**\n   * 图例项 marker 的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\n/**\n * 图例导航器，代指分页器\n */\nexport interface LegendPageNavigatorCfg {\n  marker?: {\n    style?: {\n      /** 分页导航器 icon 填充色, 默认 #000 */\n      fill?: string;\n      /** 分页导航器 icon 填充色 透明度, 默认 1 */\n      opacity?: number;\n      /** 分页导航器 icon 非激活时的填充色 */\n      inactiveFill?: string;\n      /** 分页导航器 icon 非激活时的填充色 透明度, 默认 0.45 */\n      inactiveOpacity?: number;\n      /** 分页器的大小 */\n      size?: number;\n    };\n  };\n  text?: {\n    style?: {\n      /** 分页导航器 文本 填充色，默认 #ccc */\n      fill?: string;\n      /** 字体大小, 默认 12px */\n      fontSize?: number;\n    };\n  };\n}\n\nexport type TooltipPosition = 'top' | 'left' | 'right' | 'bottom' | 'auto';\nexport interface TooltipCfg extends HtmlComponentCfg {\n  /**\n   * DOM 节点的 id\n   * @type {string}\n   */\n  containerId?: string;\n  /**\n   * 位置 x\n   * @type {number}\n   */\n  x?: number;\n  /**\n   * 位置 y\n   * @type {number}\n   */\n  y?: number;\n  /**\n   * 列表项集合\n   * @type {ListItem[]}\n   */\n  items: ListItem[];\n  /**\n   * 容器的模板\n   * @type {string}\n   */\n  containerTpl?: string;\n  /**\n   * 列表项的模板\n   * @type {[type]}\n   */\n  itemTpl?: string;\n  /**\n   * 根据 x 定位的 crosshair 的模板\n   * @type {string}\n   */\n  xCrosshairTpl?: string;\n  /**\n   * 根据 y 定位的 crosshair 的模板\n   * @type {[type]}\n   */\n  yCrosshairTpl?: string;\n  /**\n   * tooltip 限制的区域\n   * @type {Region}\n   */\n  region?: Region;\n  /**\n   * crosshairs 限制的区域\n   * @type {Region}\n   */\n  crosshairsRegion?: Region;\n  /**\n   * crosshairs 的类型， x,y,xy\n   * @type {string}\n   */\n  crosshairs?: string;\n  /**\n   * 是否跟随鼠标移动，会影响 x，y的定位\n   * @type {boolean}\n   */\n  follow?: boolean;\n  /**\n   * 偏移量，同 position 相关\n   * @type {number}\n   */\n  offset?: number;\n  /**\n   * 位置，top, bottom, left, right\n   * @type {string}\n   */\n  position?: TooltipPosition;\n  /**\n   * 传入各个 dom 的样式\n   * @type {object}\n   */\n  domStyles?: object;\n  /**\n   * 默认的各个 dom 的样式\n   * @type {object}\n   */\n  defaultStyles?: object;\n}\n\nexport interface LocationCfg {\n  [key: string]: any;\n}\n\nexport interface PointLocationCfg extends LocationCfg {\n  /**\n   * 位置 x\n   * @type {number}\n   */\n  x?: number;\n  /**\n   * 位置 y\n   * @type {number}\n   */\n  y?: number;\n}\n\nexport interface RegionLocationCfg extends LocationCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start?: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end?: Point;\n}\n\nexport interface PointsLocationCfg extends LocationCfg {\n  /**\n   * 定位点的集合\n   * @type {Point[]}\n   */\n  points?: Point[];\n}\n\nexport interface CircleLocationCfg extends LocationCfg {\n  /**\n   * 圆心\n   * @type {Point}\n   */\n  center?: Point;\n  /**\n   * 半径\n   * @type {number}\n   */\n  radius?: number;\n  /**\n   * 起始角度\n   * @type {number}\n   */\n  startAngle?: number;\n  /**\n   * 结束角度\n   * @type {number}\n   */\n  endAngle?: number;\n}\n\n/**\n * 自定义 Shape annotation 组件配置\n */\nexport interface ShapeAnnotationCfg extends GroupComponentCfg {\n  /** 自定义 render 函数，注意绘制的 shape/group 需要设置 id */\n  render: (container: IGroup) => void;\n}\n\n/**\n * Html Annotation 组件配置\n */\nexport interface HtmlAnnotationCfg extends HtmlComponentCfg {\n  /** X 方向对齐，默认 left */\n  alignX?: 'left' | 'middle' | 'right';\n  /** Y 方向对齐，默认 top */\n  alignY?: 'top' | 'middle' | 'bottom';\n  /** 自定义 html */\n  html: string | number | HTMLElement | ((container: HTMLElement) => void | string | number | HTMLElement);\n  /** zIndex 设置 */\n  zIndex?: number;\n}\n\nexport interface TextAnnotationCfg extends GroupComponentCfg, EnhancedTextCfg {\n  /**\n   * 文本标注位置 x\n   * @type {number}\n   */\n  x: number;\n  /**\n   * 文本标注位置 y\n   * @type {number}\n   */\n  y: number;\n}\n\nexport interface LineAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start?: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end?: Point;\n  /**\n   * 线上的文本配置\n   * @type {LineAnnotationTextCfg}\n   */\n  text?: LineAnnotationTextCfg;\n  /**\n   * 线的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface LineAnnotationTextCfg extends EnhancedTextCfg {\n  /**\n   * 位置，可以选择： start, end, center 和 '50%' 这类的百分比写法，默认 'center'\n   * @type {string}\n   */\n  position?: string;\n  /**\n   * 自动旋转，沿着线的方向，默认 true\n   * @type {boolean}\n   */\n  autoRotate?: boolean;\n  /**\n   * 文本的偏移 x\n   * @type {number}\n   */\n  offsetX?: number;\n  /**\n   * 文本的偏移 y\n   * @type {number}\n   */\n  offsetY?: number;\n}\n\nexport interface RegionAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start?: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end?: Point;\n  /**\n   * 区域的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface ImageAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start?: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end?: Point;\n  /**\n   * 图片地址\n   * @type {string}\n   */\n  src?: string;\n  /**\n   * 区域的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface ArcAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 圆心\n   * @type {Point}\n   */\n  center?: Point;\n  /**\n   * 半径\n   * @type {number}\n   */\n  radius?: number;\n  /**\n   * 其实角度\n   * @type {number}\n   */\n  startAngle?: number;\n  /**\n   * 结束角度\n   * @type {number}\n   */\n  endAngle?: number;\n  /**\n   * 区域的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface DataMarkerTextCfg extends EnhancedTextCfg {\n  display?: boolean;\n}\n\nexport interface DataMarkerAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 标注位置 x\n   * @type {number}\n   */\n  x: number;\n  /**\n   * 标注位置 y\n   * @type {number}\n   */\n  y: number;\n  point?: {\n    display?: boolean;\n    style?: ShapeAttrs;\n  };\n  line?: {\n    display?: boolean;\n    length?: number;\n    style?: ShapeAttrs;\n  };\n  text: DataMarkerTextCfg;\n  /**\n   * 方向\n   */\n  direction?: 'upward' | 'downward' | 'leftward' | 'rightward';\n  /**\n   * 是否自动调整\n   */\n  autoAdjust?: boolean;\n  /**\n   * Coord 的 BBox，用于 autoAdjust\n   */\n  coordBBox?: BBox;\n}\n\nexport interface DataRegionAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 位置点信息\n   * @type {Point}\n   */\n  points: Point[];\n  region?: {\n    style?: ShapeAttrs;\n  };\n  text: EnhancedTextCfg;\n}\n\nexport interface RegionFilterAnnotationCfg extends GroupComponentCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end: Point;\n  /**\n   * 染色色值\n   */\n  color: string;\n  /**\n   * 图形上的 Shapes\n   */\n  shapes: IShape[];\n}\n\nexport interface CrosshairBaseCfg extends GroupComponentCfg {\n  /**\n   * 线的样式\n   * @type {CrosshairLineCfg}\n   */\n  line?: CrosshairLineCfg;\n  /**\n   * 附加文本的样式\n   * @type {CrosshairTextCfg}\n   */\n  text?: CrosshairTextCfg;\n  /**\n   * 文本背景的配置项\n   * @type {CrosshairTextBackgroundCfg}\n   */\n  textBackground?: CrosshairTextBackgroundCfg;\n}\n\nexport interface LineCrosshairCfg extends CrosshairBaseCfg {\n  /**\n   * 起始点\n   * @type {Point}\n   */\n  start: Point;\n  /**\n   * 结束点\n   * @type {Point}\n   */\n  end: Point;\n}\n\nexport interface CircleCrosshairCfg extends CrosshairBaseCfg {\n  /**\n   * 圆心\n   * @type {Point}\n   */\n  center: Point;\n  /**\n   * 半径\n   * @type {number}\n   */\n  radius: number;\n  /**\n   * 开始角度\n   * @type {number}\n   */\n  startAngle: number;\n  /**\n   * 结束角度\n   * @type {number}\n   */\n  endAngle: number;\n}\n\nexport interface CrosshairTextBaseCfg {\n  /**\n   * 文本位置，只支持 start， end\n   * @type {string}\n   */\n  position?: string;\n  /**\n   * 文本内容\n   */\n  content?: string;\n  /**\n   * 距离线的距离\n   * @type {number}\n   */\n  offset?: number;\n}\n\nexport interface CrosshairTextCfg extends CrosshairTextBaseCfg {\n  /**\n   * 是否自动旋转\n   * @type {boolean}\n   */\n  autoRotate?: boolean;\n  /**\n   * 文本的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface HtmlCrossHairCfg extends HtmlComponentCfg {\n  /**\n   * 起始位置\n   */\n  start: Point;\n  /**\n   * 结束位置\n   */\n  end: Point;\n  /**\n   * crosshair 的模板\n   */\n  crossHairTpl: string;\n  /**\n   * 文本的模板\n   */\n  textTpl: string;\n  /**\n   * 文本\n   */\n  text: CrosshairTextBaseCfg;\n}\n\nexport interface CrosshairLineCfg {\n  /**\n   * 线的配置项\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport interface CrosshairTextBackgroundCfg {\n  /**\n   * 文本背景周围的留白\n   * @type {number|number[]}\n   */\n  padding?: number | number[];\n  /**\n   * 文本背景的样式\n   * @type {ShapeAttrs}\n   */\n  style?: ShapeAttrs;\n}\n\nexport { SliderCfg, TrendCfg } from './slider';\nexport { ScrollbarCfg, ScrollbarTheme } from './scrollbar';\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}