{"ast":null,"code":"","map":{"version":3,"names":[],"sources":["C:\\Users\\bond\\Desktop\\major project\\EasyOrder\\Admin\\node_modules\\@antv\\component\\src\\interfaces.ts"],"sourcesContent":["import { IBase } from '@antv/g-base';\nimport { BBox, ListItem, LocationCfg, LocationType, OffsetPoint, Range } from './types';\n\nexport interface IList {\n  /**\n   * 获取列表项\n   * @return {ListItem[]} 列表项集合\n   */\n  getItems(): ListItem[];\n  /**\n   * 设置列表项\n   * @param {ListItem[]} items 列表项集合\n   */\n  setItems(items: ListItem[]);\n  /**\n   * 更新列表项\n   * @param {ListItem} item 列表项\n   * @param {object}   cfg  列表项\n   */\n  updateItem(item: ListItem, cfg: object);\n  /**\n   * 清空列表\n   */\n  clearItems();\n  /**\n   * 设置列表项的状态\n   * @param {ListItem} item  列表项\n   * @param {string}   state 状态名\n   * @param {boolean}  value 状态值, true, false\n   */\n  setItemState(item: ListItem, state: string, value: boolean);\n  /**\n   * 根据状态获取\n   * @param  {state}     state 状态名\n   * @return {ListItem[]} 列表项\n   */\n  getItemsByState(state): ListItem[];\n  /**\n   * 是否存在指定的状态\n   * @param {ListItem} item  列表项\n   * @param {string} state 状态名\n   */\n  hasState(item: ListItem, state: string): boolean;\n  /**\n   * 清楚所有列表项的状态\n   * @param {string} state 状态值\n   */\n  clearItemsState(state: string);\n}\n\nexport interface ISlider {\n  /**\n   * 设置可滑动范围\n   * @param {number} min 最小值\n   * @param {number} max 最大值\n   */\n  setRange(min: number, max: number);\n  /**\n   * 获取滑动的范围\n   * @return {Range} 滑动范围\n   */\n  getRange(): Range;\n  /**\n   * 设置当前值，单值或者两个值\n   * @param {number | number[]} value 值\n   */\n  setValue(value: number | number[]);\n  /**\n   * 获取当前值\n   * @return {number|number[]} 当前值\n   */\n  getValue(): number | number[];\n}\n\nexport interface ILocation<T extends LocationCfg = LocationCfg> {\n  /**\n   * 获取定位方式，point，points，region，circle，'none' 五种值\n   * @return {LocationType} 定位方式\n   */\n  getLocationType(): LocationType;\n  /**\n   * 获取定位信息\n   * @return {T} 定位信息\n   */\n  getLocation(): T;\n  /**\n   * 设置定位信息\n   * @param {T} cfg 定位信息\n   */\n  setLocation(cfg: T);\n  /**\n   * 设置偏移量\n   * @param {number} offsetX 偏移 x\n   * @param {number} offsetY 偏移 y\n   */\n  setOffset(offsetX: number, offsetY: number);\n  /**\n   * 获取偏移信息\n   * @return {OffsetPoint} 偏移信息\n   */\n  getOffset(): OffsetPoint;\n}\n\nexport interface IComponent extends IBase {\n  /**\n   * 初始化组件\n   */\n  init(): void;\n  /**\n   * 是否是列表\n   */\n  isList(): boolean;\n  /**\n   * 是否是 slider\n   */\n  isSlider(): boolean;\n  /**\n   * 渲染组件\n   */\n  render();\n  /**\n   * 更新组件\n   * @param {object} cfg 更新的配置项\n   */\n  update(cfg: object);\n  /**\n   * 清空组件\n   */\n  clear();\n  /**\n   * 组件在画布上的包围盒\n   * @return {BBox} 包围盒\n   */\n  getBBox(): BBox;\n  /**\n   * 组件布局要求的包围盒，不一定等于 getBBox\n   * @return {BBox} 包围盒\n   */\n  getLayoutBBox(): BBox;\n  /**\n   * 是否可以响应事件\n   * @param capture 是否可以响应事件\n   */\n  setCapture(capture: boolean): void;\n  /**\n   * 显示\n   */\n  show();\n  /**\n   * 隐藏\n   */\n  hide();\n}\n"],"mappings":""},"metadata":{},"sourceType":"script","externalDependencies":[]}